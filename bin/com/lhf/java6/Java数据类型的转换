1. Java基本数据类型：byte(1字节),  short(2字节),  char(2字节),  int(4字节),  long(8字节),  float(4字节),  double(8字节),  boolean
   Java基本数据类型的包装类型：Byte,Short,Character,Integer,Long,Float,Double,Boolean

2. 基本数据类型所能表示数的范围(精度)与默认值
byte(8位): 最小值 -128（-2^7），最大值 127（2^7）, 默认值为：0

short(16位): 最小值 -32768（-2^15），最大值 32767（2^15 - 1），默认值为：0

char(16位Unicode字符)：最小值是 \u0000（即为0），最大值是 \uffff（即为65,535），默认值为：'u0000'

int(32位): 最小值 -2,147,483,648（-2^31）,最大值 2,147,483,647（2^31 - 1） ,默认值为：0

long(64位)：最小值是 -9,223,372,036,854,775,808（-2^63），最大值是 9,223,372,036,854,775,807（2^63 -1），默认值为：0L

float(32位)：最小值：1.4E-45，最大值：3.4028235E38，默认值为：0.0f

double(64位)：最小值：4.9E-324，最大值：1.7976931348623157E308，默认值为：0.0d

整数默认是int类型,浮点数默认是double类型

3. 装箱与拆箱
装箱就是自动将基本数据类型转换为包装类型；拆箱就是自动将包装类型转换为基本数据类型。
//自动装箱
Byte b = 1;
Short s = 2;
Character c = 'F';
Integer i = 100;
Long l = 100L;   // l和L均可
Float f = 3.14F; // f和F均可
Double d = 3.14;


//自动拆箱
byte b1 = b;
short s1 = s;
char c1 = c;
int i1 = i;
long l1 = l;
float f1 = f;
double d1 = d;

4. 数据类型转换必须满足如下规则：
(1) 不能对boolean类型进行类型转换。
(2) 不能把对象类型转换成不相关类的对象。
(3) 在把范围大的类型转换为范围小的类型时必须使用强制类型转换。
(4) 转换过程中可能导致溢出或损失精度，例如：
int i =128;   
byte b = (byte)i;
因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。
5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：
(int)33.5678 == 33;        
(int)-30.89f == -30


5. 数据类型之间的转换
从低级到高级。
低  --------------------------------------------------------------------------->  高
byte,short,char—> int —> long—> float —> double 
byte,short,char之间不转换,它们参与运算自动转成int

对于简单类型数据间的转换,有两种方式:自动类型转换和强制类型转换,通常发生在表达式中或方法的参数传递时。

自动类型转换：低精度向高精度转换（低级类型向高级类型转换）
(1)按照数据类型所能表示值的范围的大小(精度)，从小到大排序依次为：(byte, short, char)-->int-->long-->float-->double;

(2)在进行表达式运算时：精度小的数据类型，会向精度高的数据类型进行自动转换（也可以说成低级类型向高级类型转换）；如下（从上往下精度逐级升高）：
byte b = 100;  
short s = b; 
int i = s;
long l = i;
float f = l;
double d = f;

(3)在进行方法调用时：实际参数的精度较小，而被调用的方法的形式参数的精度较大时(若有匹配的方法，则会直接调用匹配的方法)，系统也会将精度小的数据类型自动转换为精度较大的数据类型，然后进行方法调用。

(4)同一个类中，对于多个重载方法，会转换成最“接近”的精度数据进行调用。

(5)如果低级类型为char型，它向高级类型（整型）转换时，会转换为对于的ASCII码值。
char c = 'a';
int i = c;
System.out.println("i = " + i);  // i = 97

(6)对于byte,short,char这三种类型，它们是平级的，因此它们不能相互自动转换。

强制类型转换：高精度向低精度转换（高级类型向低级类型转换），存在精度损失问题
将高精度的数据类型转换为低精度的数据类型时，可以使用强制类型转换，这种转换可能导致溢出或精度损失。
强制类型转换的数据类型必须是兼容的,强制转换不会报错,但是会损失精度。
格式：(type)value type是要强制类型转换后的数据类型 

6. 表达式运算的数据类型自动提升规则：
(1)所有的byte,short,char型的值将被提升为int型；

(2)如果有一个操作数是long型，计算结果是long型；

(3)如果有一个操作数是float型，计算结果是float型；

(4)如果有一个操作数是double型，计算结果是double型；


7. Java包装类型的转换
基本数据类型转换为包装类：
基本数据类型转换为包装类，可以利用包装类的构造函数实现，即：
Byte(byte value)、Short(short value)、Character(char value)、Integer(int value)、Long(long value)、Float(float value)、Double(double value)、Boolean(boolean value)

包装类转换为基本数据类型：
包装类转换为基本数据类型，可以使用包装类带有的xxxValue()来进行转化，即：
byteValue()、shortValue()、charValue()、intValue()、longValue()、floatValue()、doubleValue()、booleanValue()

8. 字符串与其它类型(封装和基本)间的转换
其他类型转换为字符串：
(1)调用类的串转换方法:X.toString();  针对封装类型转换为字符串
(2)自动转换:X+"";  基本类型与封装类型都可以使用此方法转化为字符串
(3)使用String的方法:String.volueOf(X); 基本类型与封装类型都可以使用此方法转化为字符串

字符串转化为其他类型：
(1)首先转化为相应的封装类实例，再调用对应的xxxValue()方法转化成其他类型，即：
byteValue()、shortValue()、charValue()、intValue()、longValue()、floatValue()、doubleValue()、booleanValue()

(2)使用封装类自带的parseXXX方法，即：
parseByte(String s)、parseShort(String s)、parseInt(String s)、parseLong(String s)、parseFloat(String s)、parseDouble(String s)、parseBoolean(String s)

(3)字符串转化为char类型：
方法一：使用 String.charAt( index ) 方法，返回在index位置的char字符。(返回值：char )
方法二：使用 String.toCharArray( ) 方法，将String 转化为 字符串数组。(返回值：char[] ) 

9. Jdk1.7 Date类与其它数据类型的相互转换
(1)Date型与int的相互转化
int型转化为Date:
使用int型来分别表示年、月、日、时、分、秒，然后利用Date的构造函数进行转化，Date的构造函数如下：
Date(int year, int month, int date)：以int型表示年、月、日

Date(int year, int month, int date, int hrs, int min)：以int型表示年、月、日、时、分

Date(int year, int month, int date, int hrs, int min, int sec)：以int型表示年、月、日、时、分、秒

Date转化为int:
可以使用Date类的相关方法，来获取对应的int型，如下：
int getYear()     //获取年份
int getMonth()    //获取月份
int getDate()     //获取日期
int getHours()    //获取小时
int getMinutes()  //获取分钟
int getSeconds()  //获取秒数

(2)Date型与long的转化
Date型转化为long型，可以使用Date类自带的方法进行转化：
long getTime()  //将时间转为long型

long型转化为Date类，可以使用Date类自带的方法进行转化：
Date(long date) //将long转换为Date

(3)Date型与String的转化
Date型转化为String型:
可以使用Date类自带的toString()方法实现：
String toString()  //将Date转换为String

也可以使用SimpleDateFormat的format(date)方法实现：
String format(Date date)  //Date转化为String
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
Date date = new Date();
String timeStr1 = sdf.format(date);

String型转化为Date型：
可以使用SimpleDateFormat的parse()方法实现：
Date parse(String source)   //String转化为Date
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
String timeStr = "2020-05-05 15:51:25";
Date date = sdf.parse(timeStr);


10. Jdk1.8 LocalDateTime类与其他数据类型的相互转换
(1)LocalDateTime与int的相互转化
int型转化为LocalDateTime
使用int型来分别表示年、月、日、时、分、秒，然后利用LocalDateTime的构造函数进行转化，LocalDateTime的构造函数如下：
LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute)

LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second)

LocalDateTime of(int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)

LocalDateTime转换为int:
可以使用LocalDateTime类的相关方法，来获取对应的int类型，如下：
int getYear()
int getMonthValue()
int getDayOfMonth()
int getDayOfYear()
int getHour()
int getMinute()
int getSecond()
int getNano()


(2)LocalDateTime与long的相互转化
//LocalDateTime转化为long
Long localDateTimeToLong = Timestamp.valueOf(LocalDateTime.now()).getTime();
System.out.println("LocalDateTime -> Long:  " + localDateTimeToLong);

//long转化为LocalDateTime
LocalDateTime longToLocalDateTime =LocalDateTime.ofInstant(Instant.ofEpochMilli(1588928910530L), ZoneId.systemDefault());
System.out.println("Long -> LocalDateTime:  " + longToLocalDateTime);


(3)LocalDateTime与String的相互转化
//LocalDateTime转化为String
String localDateTimeToString = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
System.out.println("LocalDateTime -> String:  " + localDateTimeToString);

//String转化为LocalDateTime
LocalDateTime stringToLocalDateTime =LocalDateTime.parse("2020-05-08 15:30:11", DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
System.out.println("String -> LocalDateTime:  " + stringToLocalDateTime);


总结：
1. 只有boolean不参与数据类型的转换

2. 自动类型的转换：
a.常数在表示数范围内是能够自动类型转换的

b.数据类型范围小的可以自动向数据类型范围大的转换

c.引用类型能够自动转换为父类的

d.基本数据类型和它们对应的包装类型是能够互相转换的

3. 强制类型转换：用圆括号括起来目标类型，置于变量前
