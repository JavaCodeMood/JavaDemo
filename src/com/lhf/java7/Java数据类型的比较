1. “==” : 可以比较基本数据类型 , 也可以比较引用数据类型 。基本数据类型比较的是值，引用数据类型比较的是地址。
基本数据类型byte,short,char,int,long,float,double,boolean
封装数据类型Byte,Short,Character,Integer,Long,Float,Double,Boolean

2. equals() : 只能比较引用数据类型, 默认比较的是地址值，它不能比较基本数据类型，基本数据类型不是Object类型, 不能使用equals方法比较。
  使用equals方法比较引用类型时，等同于"=="，比较的是两个对象的值是否相等。
如果你想自定义比较方法，需要重写equals方法。

3. Jave中，Object类是所有Java类的祖先，Object是Java语言中唯一一个没有父类的类。每个类都使用 Object 作为超类。所有对象（包括数组）都实现这个类的方法。可以使用类型为Object的变量指向任意类型的对象。
在Object类中定义的方法，在所有类中都可以使用。Object类中定义了equals()方法和hashCode()方法，具体如下：
public boolean equals(Object obj): 比较两个对象引用的值是否相等（比较地址）。指出调用该方法的对象是否与obj对象相等。即地址是否相等。
public int hashCode():该方法返回对象的哈希码值，唯一标识一个对象。

Object类中定义的equals方法，用于比较对象的内存地址， 对于引用数据类型进行equals比较，在没有重写equals方法的情况下，它们之间的比较还是基于它们在内存中的存放位置的地址值的。
而有些类重写了equals方法和hashCode方法，比如Byte,Short,Character,Integer,Long,Float,Double,String,Date,Boolean等等，在这些类当中equals方法有其自身的实现，而不再是比较类在堆内存中的存放地址了。 
因为Object的equals方法也是用双等号（==）进行比较的，所以比较后的结果跟双等号（==）的结果相同。

4. 基本数据类型byte,short,char,int,long,float,double,boolean的比较应该使用双等号(==),比较的是它们的值。

5. 引用数据类型在使用==比较的时候，比较的是它们在内存中的存放地址.只有当它们是同一个new出来的对象时，它们的比较结果才会为true,否则比较结果为false.
       基本数据类型在使用==比较的时候，比较的是它们的值。不同类型之间的基本数据类型也可以使用==进行比较

6. 基本数据类型与其对应的包装类运算或比较时，会自动拆箱成基本数据类型,也可以使用==直接进行比较。
      在自动装箱时，会先检查其值是否在-128到127之间，如果在这之间，就会直接指向常量池中其值的地址;
      如果不在-128到127之间，就会创建一个新的对象，存储在堆中，就是两个不同的对象，比较时为false.

7. 凡是new出来的都是对象，存储在堆内存中。

7. java中Integer类型对于-128-127之间的数是存缓冲区的，所以用等号比较是一致的。但对于不在这区间的数字是在堆中new出来的。所以地址空间不一样，也就不相等。
   如果两个Integer类型的数相等，且在-128-127之间，用==比较返回true，其余返回false.

8. 对于引用数据类型，我们还可以使用x.compareTo(y)方法来比较， 如果x与y相等，返回0；x大于y返回1；x小于y返回-1；

9. 两个基本类型int进行相等比较，直接用==即可。一个基本类型int和一个包装类型Integer进行相等比较，直接用==比较即可，Integer类型会做拆箱操作。

10. Integer类型比较大小，要么调用Integer.intValue()转为基本类型用“==”比较，要么直接用equals比较。
   总结：(1)凡是new出来的都是对象，new Integer(127)与new Integer(127)使用==比较为false，使用equals比较才会返回true.
      (2)无论如何，Integer与new Integer使用==比较都不会相等，使用equals比较才会返回true.
      (3)两个都是非new出来的Integer，如果数在-128到127之间，使用==比较则是true,如果不在-128到127之间，使用==比较否则为false。而如果使用equals方法来比较，无论比较的数在不在-128到127之间都为true.
      (4)int和integer(无论new否)比，都为true，因为会把Integer自动拆箱为int再去比.
      
11. long与Long的比较, float与Float的比较, double与Double的比较均与int与Integer的比较类似，不再多说。

12. String(字符串)之间的比较
(1)String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了。
(2)java中字符串的值是不可改变的，相同的字符串在内存中只会存 一份，因此使用String直接定义的两个相同字符串，使用==来比较时，会返回true. 使用equals方法比较也会返回true.
(3)使用String和new String()定义的相同字符串，使用==比较将会返回false(不同的对象), 使用equals方法比较返回true.
(4)使用new String()创建的两个相同字符串，使用==比较时返回false（不同的对象）,使用equals方法比较返回true.
(5)字符串的+操作，也会生成新的对象。
(6)final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。
(7)使用final修饰的两个字符串变量做拼接操作后，与另一个相同的字符串使用==比较返回的也是true.

13. Date之间的比较
见代码

14. 默认值
见图片【Java基本数据类型默认值.png】
基本数据类型对应的封装类型都是对象，对象的默认值为null.
String默认值为null.


